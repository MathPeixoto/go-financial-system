#file: noinspection YAMLSchemaValidation

# This workflow will deploy a golang project

name: Deploy to production

on:
  push:
    branches: [ "main" ]

jobs:

  deploy:
    name: Build image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
      - uses: azure/setup-kubectl@v3
        with:
          version: 'v1.26.0'
        id: install
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@master
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Load secrets and save into app.env file
        run: aws secretsmanager get-secret-value --secret-id bank --query SecretString --output text | jq -r 'to_entries|map("\(.key)=\(.value)") |.[]' > app.env

      - name: Build, tag, and push docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: bank
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG -t $REGISTRY/$REPOSITORY:latest .
          docker push -a $REGISTRY/$REPOSITORY

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name bank --region us-east-1

      - name: Deploy docker image to EKS
        run: |
          kubectl apply -f eks/configmap/aws-auth.yaml
          kubectl apply -f eks/deployment/redis-deployment.yaml
          kubectl apply -f eks/service/redis-service.yaml
          kubectl apply -f eks/deployment/deployment.yaml
          kubectl apply -f eks/service/service.yaml
          kubectl apply -f eks/issuer.yaml
          kubectl apply -f eks/ingress/http-ingress.yaml